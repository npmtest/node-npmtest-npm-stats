{"/home/travis/build/npmtest/node-npmtest-npm-stats/test.js":"/* istanbul instrument in package npmtest_npm_stats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-stats/lib.npmtest_npm_stats.js":"/* istanbul instrument in package npmtest_npm_stats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_stats = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_stats = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-stats/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-stats && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_stats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_stats\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_stats.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_stats.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_stats.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_stats.__dirname + '/lib.npmtest_npm_stats.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-stats/node_modules/npm-stats/index.js":"var es = require('event-stream')\n  , reducestream = require('stream-reduce')\n  , jsonstream = require('JSONStream')\n  , merge = require('lodash.merge')\n\nfunction passthrough(data) {\n  return data\n}\n\nmodule.exports = exports = stats\n\n// pristine copy of default options\nvar DEFAULTS = {\n    registry: 'https://skimdb.npmjs.com/',\n    modules: 'registry',\n    // https://api.npmjs.org/downloads/ :detail=(point|range) / :period=(last-month|last-week|last-day|YYYY-MM-DD:YYYY-MM-DD) / :package?\n    downloads: 'https://api.npmjs.org/downloads',\n    users: 'public_users',\n    dirty: false\n}\n\n// inherit to ensure original defaults peek through if keys get deleted\nvar GLOBAL_DEFAULTS = merge(Object.create(DEFAULTS), DEFAULTS)\n\nexports.defaults = function(defaults){\n  return merge(GLOBAL_DEFAULTS, defaults)\n}\n\nfunction stats(registry, mainopts) {\n  if (typeof registry === 'object') {\n    mainopts = registry\n    registry = undefined\n  }\n\n  mainopts = merge({}, GLOBAL_DEFAULTS, mainopts, {registry:registry});\n  var nanoConf = merge({url: mainopts.registry}, mainopts.nano)\n\n  var nano = require('nano')(nanoConf)\n    , modules = nano.db.use(mainopts.modules)\n    , users = nano.db.use(mainopts.users)\n    , downloadUrl = mainopts.downloads\n\n  var Keyword = require('./lib/keyword')(modules, downloadUrl, users, mainopts)\n    , Module = require('./lib/module')(modules, downloadUrl, users, mainopts)\n    , User = require('./lib/user')(modules, downloadUrl, users, mainopts)\n    , Registry = require('./lib/registry')(modules, downloadUrl, users, mainopts)\n\n  function modifier(method) {\n    return function(options, callback) {\n      options = options || {}\n\n      if (typeof options === 'string') {\n        options = { string: options }\n      }\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      if (!method.select || mainopts.dirty) {\n        return method.call(this, options, callback)\n      }\n\n      var buffer = ''\n      var write = callback ? function write(data) {\n        buffer += data\n        this.queue(data)\n      } : function(data) {\n        this.queue(data)\n      }\n\n      var stream = es.pipeline(\n          method.call(this, options)\n        , jsonstream.parse(method.select)\n        , es.mapSync(method.map || passthrough)\n        , method.reduce\n          ? reducestream(method.reduce, method.reduce.start)\n          : es.mapSync(passthrough)\n        , method.single\n          ? es.stringify()\n          : jsonstream.stringify('[', ',', ']')\n        , es.through(write, end)\n      )\n\n      if (callback) stream.on('error', callback)\n\n      function end() {\n        var self = this\n\n        if (callback) {\n          try {\n            callback(null, JSON.parse(buffer))\n          } catch(e) {\n            callback(e)\n          }\n          return\n        }\n\n        this.queue(null)\n      }\n\n      return stream\n    }\n  }\n\n  ;[Registry, Keyword, User, Module].forEach(function(model) {\n    Object.keys(model.prototype).forEach(function(name) {\n      var method = model.prototype[name]\n\n      model.prototype[name] = modifier(model.prototype[name])\n    })\n  })\n\n  var registry = new Registry\n\n  registry.user = User\n  registry.module = Module\n  registry.keyword = Keyword\n\n  return registry\n}\n","/home/travis/build/npmtest/node-npmtest-npm-stats/node_modules/npm-stats/lib/keyword.js":"module.exports = function(modules) {\n  function Keyword(name) {\n    if (!(this instanceof Keyword)) return new Keyword(name)\n    this.name = name\n  }\n\n  Keyword.prototype.count = function(options, callback) {\n    return modules.get('_design/app/_view/byKeyword', {\n        group_level: 1\n      , startkey: [this.name]\n      , endkey: [this.name, {}]\n    }, callback)\n  }\n  Keyword.prototype.count.select = ['rows', true, 'value']\n  Keyword.prototype.count.single = true\n\n  Keyword.prototype.list = function(options, callback) {\n    return modules.get('_design/app/_view/byKeyword', {\n        group_level: 2\n      , startkey: [this.name]\n      , endkey: [this.name, {}]\n    })\n  }\n  Keyword.prototype.list.select = ['rows', true]\n  Keyword.prototype.list.map = function(row) {\n    return row.key[1]\n  }\n\n  return Keyword\n}","/home/travis/build/npmtest/node-npmtest-npm-stats/node_modules/npm-stats/lib/module.js":"var request = require('request')\n  , merge = require('lodash.merge')\n\n\nfunction leading(n, d) {\n  d = d || 2\n  n += ''\n  while (n.length < d) n = \"0\" + n\n  return n\n}\n\nfunction ymd(date) {\n  date = new Date(date)\n  return [date.getFullYear(), leading(date.getMonth() + 1), leading(date.getDate())].join('-')\n}\n\nmodule.exports = function(modules, downloadUrl, users, mainopts) {\n  function Module(name) {\n    if (!(this instanceof Module)) return new Module(name)\n    this.name = name\n  }\n\n  Module.prototype.info = function(options, callback) {\n    return modules.get(this.name, callback)\n  }\n  Module.prototype.version = function(options, callback) {\n    return modules.get('_design/app/_show/package/' + this.name, {\n      version: options.string\n    }, callback)\n  }\n\n  function getDownloader(methodName, defs) {\n    defs = merge({\n        detail: 'range',\n        since: '2000-01-01',\n        until: '3000-01-01'\n      }, defs)\n    function Downloader(options, callback) {\n      var detail = options.detail || defs.detail\n        , period = (options.since = options.since ? ymd(options.since) : defs.since) + ':' +\n                   (options.until = options.until ? ymd(options.until) : defs.until)\n      var url = [downloadUrl, detail, period, this.name].join('/')\n      return request.get({ url:url, strictSSL:false }, callback)\n    }\n    return Downloader\n  }\n  \n  Module.prototype.downloads = getDownloader('downloads')\n  Module.prototype.downloads.select = ['downloads', true]\n  Module.prototype.downloads.map = function(row) {\n    return { date:row.day, value:row.downloads }\n  }\n\n  Module.prototype.totalDownloads = getDownloader('totalDownloads')\n  Module.prototype.totalDownloads.select = ['downloads', true]\n  Module.prototype.totalDownloads.single = true\n  Module.prototype.totalDownloads.reduce = function(acc, row) {\n    return acc + (row.downloads || 0)\n  }\n  Module.prototype.totalDownloads.reduce.start = 0\n\n  Module.prototype.stars = function(options, callback) {\n    return modules.get('_design/app/_view/starredByPackage', {\n      startkey: this.name\n      , endkey: this.name\n    }, callback)\n  }\n  Module.prototype.stars.select = ['rows', true, 'value']\n\n  Module.prototype.latest = function(options, callback) {\n    return modules.get('_design/app/_view/byField', {\n      key: this.name\n    }, callback)\n  }\n  Module.prototype.latest.select = ['rows', true, 'value']\n  Module.prototype.latest.single = true\n\n  Module.prototype.field = function(options, callback) {\n    var field = options.field || options.string\n\n    return modules.get('_design/app/_list/byField/byField', {\n        field: field\n      , key: this.name\n    }, callback)\n  }\n\n  Module.prototype.size = function(options, callback) {\n    return modules.get('_design/app/_view/howBigIsYourPackage', {\n      key: this.name\n    }, callback)\n  }\n  Module.prototype.size.select = ['rows', true, 'value']\n  Module.prototype.size.single = true\n\n  Module.prototype.dependents = function(options, callback) {\n    return modules.get('_design/app/_view/dependedUpon', {\n        group_level: 2\n      , startkey: [this.name]\n      , endkey: [this.name, {}]\n    }, callback)\n  }\n  Module.prototype.dependents.select = ['rows', true, 'key']\n  Module.prototype.dependents.map = function(row) {\n    return row[1]\n  }\n\n  return Module\n}","/home/travis/build/npmtest/node-npmtest-npm-stats/node_modules/npm-stats/lib/registry.js":"module.exports = function(modules, downloadUrl, users, mainopts) {\n  function Registry() {\n    if (!(this instanceof Registry)) return new Registry(name)\n  }\n\n  Registry.prototype.list = function(options, callback) {\n    return modules.get('_design/app/_view/browseAll', {\n      group_level: 1\n    }, callback)\n  }\n  Registry.prototype.list.select = ['rows', true, 'key', '0']\n\n  Registry.prototype.listByDate = function(options, callback) {\n    var params = {}\n\n    if (options.since && typeof options.since !== 'string')\n      params.startkey = new Date(+options.since)\n    if (options.until && typeof options.until !== 'string')\n      params.endkey   = new Date(+options.until)\n\n    return modules.get('_design/app/_view/updated', params, callback)\n  }\n  Registry.prototype.listByDate.select = ['rows', true]\n  Registry.prototype.listByDate.map = function(row) {\n    return { name: row.id, date: row.key }\n  }\n\n  return Registry\n}\n","/home/travis/build/npmtest/node-npmtest-npm-stats/node_modules/npm-stats/lib/user.js":"module.exports = function(module, downloadUrl, users, mainopts) {\n  function User(name) {\n    if (!(this instanceof User)) return new User(name)\n    this.name = name\n    this.key = 'org.couchdb.user:' + this.name\n  }\n\n  User.prototype.count = function(options, callback) {\n    return module.get('_design/app/_view/npmTop', {\n        group_level: 1\n      , startkey: [this.name]\n      , endkey: [this.name, {}]\n    }, callback)\n  }\n  User.prototype.count.select = ['rows', true, 'value']\n  User.prototype.count.single = true\n\n  User.prototype.list = function(options, callback) {\n    return module.get('_design/app/_view/byUser', {\n        startkey: this.name\n      , endkey: this.name\n    })\n  }\n  User.prototype.list.select = ['rows', true]\n  User.prototype.list.map = function(row) {\n    return row.value\n  }\n\n  User.prototype.starred = function(options, callback) {\n    return module.get('_design/app/_view/starredByUser', {\n        startkey: this.name\n      , endkey: this.name\n    })\n  }\n  User.prototype.starred.select = ['rows', true]\n  User.prototype.starred.map = function(row) {\n    return row.value\n  }\n\n  User.prototype.info = function(options, callback) {\n    return users.get('org.couchdb.user:' + this.name, callback)\n  }\n\n  return User\n}\n"}